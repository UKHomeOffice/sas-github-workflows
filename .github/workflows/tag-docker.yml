name: 'Build Docker and Tag Repository'
on:
  workflow_call:
    inputs:
      registry:
        required: false
        type: string
      image:
        required: true
        type: string
      tag:
        required: true
        type: string
      sha:
        required: false
        type: string
      ecr:
        type: boolean
        default: false
      checkoutSubmodule:
        required: false
        description: 'Whether to checkout submodules.'
        type: string
        default: 'true'

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  docker:
    name: 'Build Docker and Tag Repository'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.checkoutSubmodule }}

      - name: Publish image to ECR
        uses: UKHomeOffice/sas-github-workflows/.github/actions/docker-ecr-publish@v2
        if: inputs.ecr == true
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          tag: ${{ inputs.tag }}
          tag_latest: ${{ github.base_ref == 'main' }}
          image: ${{ inputs.image }}

      - name: Publish image to Docker
        uses: UKHomeOffice/sas-github-workflows/.github/actions/docker-publish@v2
        if: inputs.ecr == false
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.DOCKER_USER_NAME || secrets.QUAY_ROBOT_USER_NAME }}
          password: ${{ secrets.DOCKER_PASSWORD || secrets.QUAY_ROBOT_TOKEN }}
          tag: ${{ inputs.tag }}
          tag_latest: ${{ github.base_ref == 'main' }}
          image: ${{ inputs.image }}
          
      - name: Tag Repository
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ inputs.tag }}",
              sha: "${{ inputs.sha || inputs.tag }}"
            })
